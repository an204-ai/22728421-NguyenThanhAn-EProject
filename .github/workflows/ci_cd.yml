name: CI/CD Pipeline for Microservices

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:6
        ports: ['27017:27017']
        options: >-
          --health-cmd="mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5
      rabbitmq:
        image: rabbitmq:3-management
        ports: ['5672:5672', '15672:15672']
        options: >-
          --health-cmd="rabbitmqctl status"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install global tools
        run: npm install -g wait-on pm2

      - name: Create .env files
        run: |
          mkdir -p auth product order
          cat <<EOF > auth/.env
          MONGODB_AUTH_URI=mongodb://localhost:27017/ci_auth
          JWT_SECRET=ci_secret
          RABBITMQ_URI=amqp://guest:guest@localhost:5672
          EOF
          cat <<EOF > product/.env
          MONGODB_PRODUCT_URI=mongodb://localhost:27017/ci_product
          AUTH_SERVICE_URL=http://localhost:3001
          RABBITMQ_URI=amqp://guest:guest@localhost:5672
          EOF
          cat <<EOF > order/.env
          MONGODB_ORDER_URI=mongodb://localhost:27017/ci_order
          PRODUCT_SERVICE_URL=http://localhost:3002
          RABBITMQ_URI=amqp://guest:guest@localhost:5672
          EOF

      - name: Install dependencies
        run: |
          cd auth && npm ci && cd ..
          cd product && npm ci && cd ..
          cd order && npm ci && cd ..

      - name: Wait for MongoDB and RabbitMQ
        run: |
          wait-on tcp:localhost:27017
          wait-on tcp:localhost:5672

      - name: Start services in background
        run: |
          cd auth && nohup npm start > ../auth.log 2>&1 &
          cd ../product && nohup npm start > ../product.log 2>&1 &
          cd ../order && nohup npm start > ../order.log 2>&1 &
          sleep 10

      - name: Verify services are up
        run: |
          curl -f http://localhost:3001 || exit 1
          curl -f http://localhost:3002 || exit 1
          curl -f http://localhost:3003 || exit 1

      - name: Run Tests (Parallel)
        run: |
          cd auth && npm test &
          cd ../product && npm test &
          cd ../order && npm test &
          wait

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: service-logs
          path: |
            auth.log
            product.log
            order.log

      - name: Cleanup Background Services
        if: always()
        run: |
          pkill -f "node" || true
          docker ps -q | xargs -r docker stop

  docker-build-push:
    needs: build-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker images
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest auth
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest product
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest order
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/auth-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/product-service:latest
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/order-service:latest
