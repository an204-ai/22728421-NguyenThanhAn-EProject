name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    name: Build and Test Microservices
    runs-on: ubuntu-latest

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Build Docker images
      run: docker compose build

    - name: Create environment variable files
      run: |
        # AUTH SERVICE
        echo "MONGODB_AUTH_URI=mongodb://mongo:27017/auth" > auth/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> auth/.env
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> auth/.env
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> auth/.env

        # PRODUCT SERVICE
        echo "MONGODB_PRODUCT_URI=mongodb://mongo:27017/product" > product/.env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> product/.env
        echo "RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672" >> product/.env
        echo "LOGIN_TEST_USER=${{ secrets.LOGIN_TEST_USER }}" >> product/.env
        echo "LOGIN_TEST_PASSWORD=${{ secrets.LOGIN_TEST_PASSWORD }}" >> product/.env

        # ORDER SERVICE
        echo "MONGODB_ORDER_URI=mongodb://mongo:27017/order" > order/.env
        echo "RABBITMQ_URI=amqp://rabbitmq:5672" >> order/.env
        echo "RABBITMQ_QUEUE=orders" >> order/.env
        echo "PORT=3002" >> order/.env

    - name: Start required containers
      run: docker compose up -d mongo rabbitmq auth

    - name: check service run
      run: |
        docker compose ps
        

    # ---------------- AUTH TEST ----------------
    - name: Run unit tests (auth)
      run: |
        echo "Running auth service tests..."
        docker exec $(docker ps -qf "name=auth") node --max-old-space-size=256 node_modules/.bin/mocha --timeout 20000 src/test/**/*.test.js --exit || exit 1

    # D·ªçn RAM sau auth test
    - name: Restart containers for next test
      run: docker compose restart mongo rabbitmq auth

    - name: Wait before running product tests
      run: sleep 5

       # ---------------- PRODUCT TEST ----------------
    - name: Run unit tests (product)
      run: |
        echo "Running product service tests..."
        docker compose run --rm product npm test

    # ---------------- CLEANUP ----------------
    - name: Stop and remove all containers
      if: always()
      run: docker compose down -v

  deploy:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Build images for deployment
      run: docker compose build

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_TOKEN }}

    - name: Push images to Docker Hub
      run: |
        docker tag 22728421-nguyenthanhan-eproject-auth:latest ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-auth:latest

        docker tag 22728421-nguyenthanhan-eproject-product:latest ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-product:latest

        docker tag 22728421-nguyenthanhan-eproject-order:latest ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-order:latest

        docker tag 22728421-nguyenthanhan-eproject-api-gateway:latest ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/eproject-api-gateway:latest
